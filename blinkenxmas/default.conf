# The [mqtt] secion details where the MQTT broker can be found, and what topic
# should be used for publication (by the web interface) and subscription (by
# the Pico LED driver).

[mqtt]
host = broker
port = 1883
topic = blinkenxmas

# The [web] section specifies the address that the web interface should listen
# to (0.0.0.0 meaning "all addresses" is the default), and what port to use.
# Please note the default port (80) is privileged. If you do not wish to run
# the service as root, pick an unprivileged port (>1024).

[web]
bind = 0.0.0.0
port = 80
database = /var/local/cache/blinkenxmas/presets.db

# The [wifi] section provides the SSID and password the Pico should use to
# connect to the local LAN. Please note this section is *only* used by the
# Pico; the web interface uses the host's network configuration.

[wifi]
ssid = your-ssid-here
password = your-wifi-password-here

# The [pico] section provides other Pico-specific settings including which
# GPIO to use to indicate status (by blinking an LED attached to it); this
# defaults to "LED" which is the built-in LED on the Pico-W but can be any
# other unused GPIO number. The "error" setting can be "reset" or "flash"
# indicating what to do in the case of a fatal error

[pico]
status = LED
error = reset

# The [camera] section defines the camera available for calibration of the
# Xmas tree. Valid types are:
#
# * none -- The default; indicates no camera is available for calibration.
#
# * picamera -- This expects a Raspberry Pi camera module which will be
#   accessed via the legacy picamera library. The "capture" key specifies the
#   resolution at which to capture images. The "preview" key specifies the
#   resolution at which to preview images.
#
# * gstreamer -- This expects a V4L2 video source (typically a USB web-camera)
#   which will be accessed via GStreamer. The video source can be manually
#   configured with the "device" key which defaults to /dev/video0. The
#   "capture" and "preview" keys may be specified with this camera too.
#
# * files -- This expects a set of pre-captured JPEG images stored in the
#   specified path with filenames in the format:
#   "angle090_led015_color#ffffff.jpg"; i.e. "angle" followed by the
#   zero-padded angle of capture (0..359), "led" followed by the zero-padded
#   index of the LED (0..999), and "color" followed by color of the LED in the
#   form #RRGGBB. The JPEG files must all have the same resolution, and all
#   expected files must be present (i.e. one image for each angle for each LED
#   for each expected color, even if the LED is not visible from that angle).

[camera]
type = picamera
capture = 2592x1944
preview = 640x480
rotate = 0

type = gstreamer
device = /dev/video0
capture = 960x720
preview = 640x480

type = files
path = /tmp

type = none

# You can specify up to eight [leds:x] sections. At least one section must be
# specified. The "x" is arbitrary and only serves to uniquely identify each
# section.
#
# Each [leds:x] section specifies a separate strip of LEDs that the Pico will
# drive. Within each section, the following settings may be specified (settings
# with a * suffix must be specified):
#
# driver* -- This must be WS2812 or APA102 depending on the protocol expected
# by the strip
#
# count* -- The number of LEDs in the strip
#
# fps -- The framerate at which to drive the LEDs. Defaults to 60
#
# reversed -- If "no" (the default), the LEDs in the strip will be numbered
# from their connection point "outward". Otherwise, they will be numbered
# "inward"; this only matters for certain animations
#
# order* -- The order the strip expects colors to be transmitted. Must be one
# of RGB, RBG, GRB, GBR, BRG, BGR, or any of these with a "W" suffix (e.g.
# RGBW) if the strip has four LEDs per segment
#
# pin* -- This must be included if "driver" is WS2812, and specifies the GPIO
# pin to which the strip is connected on the Pico
#
# clk* dat* -- These must be included if "driver" is APA102, and specify the
# GPIO pins which will be used for the "clock" and "data" lines for this strip
# on the Pico

[leds:1]
driver = WS2812
count = 50
fps = 60
order = GRB
pin = 13

[leds:2]
driver = WS2812
count = 50
fps = 60
reversed = yes
order = RGBW
pin = 12

[leds:3]
driver = APA102
count = 50
order = RGB
dat = 15
clk = 16
