from mqtt_as import config

# Fill out the configuration below, then copy/rename this file to "config.py"

# WiFi configuration
config['ssid'] = 'your-ssid-here'
config['wifi_pw'] = 'your-ssid-password'

# MQTT broker configuration. The "server" can be a hostname or IP address of
# the MQTT broker, while "port" specifies the IP port the broker is listening
# to. The "topic" names the topic that animations will be published to
config['server'] = 'broker'
config['port'] = 0
config['topic'] = 'blinkenxmas'

# Configuration of the LED strips. The "fps" setting is the refresh frequency
# of all strips. The "leds" setting is a list of tuples specifying:
#
#  (leds-type, led-count, reversed, color-order, *pins)
#
# Where:
#
# * "leds-type" is "WS2812" or "APA102"
# * "leds-count" is the number of LEDs # in this strip
# * "reversed" is a boolean value indicating if the LEDs in the
#   strip are numbered forward (False) or backward (True)
# * "color-order" is "RGB", "BGR", "GRB", etc. indicating the ordering of
#   colors in the data for this strip, and
# * "*pins" is either a single GPIO number (for the DAT line of WS2812s) or two
#   GPIO numbers (for the DAT and CLK lines of APA102s respectively).
config['fps'] = 60
config['leds'] = [
    # Type     Count Rev  Order  GPIO(s)
    ('WS2812', 50,   0,   'GRB', 15),
    ('APA102', 25,   0,   'RGB', 12, 13),
]

# The identifier of the LED to use when reporting status and errors (defaults
# to 'LED' which is the built-in LED on the Pico W, but can be any GPIO number
# too. The "error" setting must be either 'reset' (the default, which will
# soft-reset the board upon error)) or 'blink' (which will blink the status LED
# 5 times repeatedly on error)
config['status'] = 'LED'
config['error'] = 'reset'
